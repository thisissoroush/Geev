using Geev.Core.Definitions;
using System.ComponentModel.DataAnnotations;

namespace Geev.Core.Exceptions;

/// <summary>
/// Represents a exception that occurs during validation of input data of methods.
/// </summary>
public class GeevValidationException : GeevException
{
    public const int ExceptionCode = 1;

    /// <summary>
    /// Initializes a new instance of the ValidationException class using an error message generated by the system.
    /// </summary>
    /// <param name="message">The error message</param>
    /// <param name="validationErrors">The list of </param>
    public GeevValidationException(string message, IList<ValidationResult> validationErrors) : base(message)
    {
        ValidationErrors = validationErrors ?? new List<ValidationResult>();
        ErrorCode = ExceptionCode;
        Severity = LogSeverity.Warn;
    }

    /// <summary>
    /// Initializes a new instance of the ValidationException class using an error message generated by the system.
    /// </summary>
    /// <param name="message">The error message</param>
    /// <param name="innerException">The underlying exception which caused this instance of GeevValidationException</param>
    public GeevValidationException(string message, Exception innerException = null) : base(message, "", innerException)
    {
        ErrorCode = ExceptionCode;
        Severity = LogSeverity.Warn;
    }

    /// <summary>
    /// Detailed list of validation errors for this exception.
    /// </summary>
    public IList<ValidationResult> ValidationErrors { get; protected set; } = new List<ValidationResult>();
}
